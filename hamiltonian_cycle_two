#include <iostream>
#include <vector>
using namespace std;

void nextval(int k, int x[], int n, const vector<vector<int>>& graph) {
    int j;
    while (true) {
        x[k] = (x[k] + 1) % n;
        if (x[k] == 0) return;  

        if (graph[x[k - 1]][x[k]] != 0) {
            for (j = 0; j < k; j++) {
                if (x[j] == x[k]) break; 
            }
            if (j == k) {  
                if (k < n - 1 || (k == n - 1 && graph[x[k]][x[0]] != 0))
                    return;
            }
        }
    }
}

void print(int x[], int n) {
    for (int i = 0; i < n; i++) {
        cout << x[i] << " ";
    }
    cout << x[0]; 
    cout << endl;
}

void hamiltonian(int k, int x[], int n, const vector<vector<int>>& graph) {
    while (true) {
        nextval(k, x, n, graph);
        if (x[k] == 0) return;

        if (k == n - 1) {
            print(x, n); 
        } else {
            hamiltonian(k + 1, x, n, graph); 
        }
    }
}

int main() {
    int n = 5;
    vector<vector<int>> graph = {
        {0,1,1,0,1},
        {1,0,1,1,1},
        {1,1,0,1,0},
        {0,1,1,0,1},
        {1,1,0,1,0}
    };

    int* x = new int[n];
    for (int i = 0; i < n; i++) x[i] = 0;
    x[0] = 0;  
    cout << "Hamiltonian cycles:\n";
    hamiltonian(1, x, n, graph);

    delete[] x;
    return 0;
}
